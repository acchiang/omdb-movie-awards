{"version":3,"sources":["components/SearchBar.react.js","components/TableData.react.js","components/Nominations.react.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","searchBar","width","padding","SearchBar","props","searchInput","setSearchInput","classes","onSearch","useCallback","event","target","value","className","TextField","id","label","variant","fullWidth","onChange","tableContainer","paginator","margin","TableData","nominationData","setNominationData","React","useState","data","setData","page","setPage","columns","minWidth","useEffect","length","fetch","method","then","res","json","Search","catch","error","console","log","rows","useMemo","rowsData","forEach","row","push","Title","Year","Nominate","Button","onClick","isNewNomination","item","index","window","alert","createData","emptyView","Typography","color","ButtonGroup","disabled","TableContainer","Table","stickyHeader","size","aria-label","TableHead","TableRow","map","column","TableCell","key","align","style","TableBody","hover","role","tabIndex","code","format","cardContainer","paddingLeft","paddingBottom","submissionButton","Nominations","NomCard","Card","CardContent","CardActions","filter","nom","nomCards","i","App","searchContent","component","Link","href","Paper","elevation","children","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.74e1912b.chunk.js","sourcesContent":["import React, { useCallback } from \"react\";\nimport { TextField } from \"@material-ui/core\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nconst useStyles = makeStyles({\n  searchBar: {\n    width: \"70%\",\n    padding: 10,\n  },\n});\n\nfunction SearchBar(props) {\n  const searchInput = props.searchInput;\n  const setSearchInput = props.setSearchInput;\n  const classes = useStyles();\n\n  const onSearch = useCallback(\n    (event) => {\n      setSearchInput(event.target.value);\n    },\n    [setSearchInput]\n  );\n  return (\n    <div className={classes.searchBar}>\n      <TextField\n        id=\"outlined-basic\"\n        label=\"Search movie title (eg. Star Wars, Hello, Test, etc)\"\n        variant=\"outlined\"\n        fullWidth={true}\n        value={searchInput}\n        onChange={onSearch}\n      />\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import React, { useEffect, useMemo } from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nconst useStyles = makeStyles({\n  tableContainer: {\n    width: \"95%\",\n    padding: 10,\n  },\n\n  paginator: {\n    margin: 10,\n  },\n});\n\nfunction TableData(props) {\n  const { searchInput, nominationData, setNominationData } = props;\n  const classes = useStyles();\n  const [data, setData] = React.useState();\n  const [page, setPage] = React.useState(1);\n\n  const columns = [\n    { id: \"Title\", label: \"Title\", minWidth: 250 },\n    { id: \"Year\", label: \"Year\", minWidth: 50 },\n    {\n      id: \"Nominate\",\n      label: \"Nominate\",\n      minWidth: 50,\n    },\n  ];\n\n  useEffect(() => {\n    if (searchInput.length !== 0) {\n      fetch(\n        `https://www.omdbapi.com/?s=${searchInput}&type=movie&page=${page}&apikey=7faf4e64`,\n        {\n          method: \"GET\",\n        }\n      )\n        .then((res) => res.json())\n        .then((res) => setData(res.Search))\n        .catch((error) => console.log(error));\n    }\n  }, [page, searchInput]);\n\n  const rows = useMemo(() => {\n    let rowsData = [];\n    const createData = (row) => {\n      const { Title, Year } = row;\n      const Nominate = (\n        <Button\n          onClick={() => {\n            let isNewNomination = true;\n            nominationData.forEach((item, index) => {\n              if (item.Title === Title && isNewNomination) {\n                window.alert(\"You already nominated this movie!\");\n                isNewNomination = false;\n                return;\n              }\n            });\n            if (isNewNomination) {\n              if (nominationData.length >= 5) {\n                window.alert(\n                  \"You can only nominate up to 5 movies. Remove one to add another.\"\n                );\n              } else {\n                setNominationData([...nominationData, { Title, Year }]);\n              }\n            }\n          }}\n        >\n          Nominate\n        </Button>\n      );\n      return { Title, Year, Nominate };\n    };\n\n    if (data != null) {\n      data.forEach((row) => {\n        rowsData.push(createData(row, setNominationData));\n      });\n    }\n    return rowsData;\n  }, [data, nominationData, setNominationData]);\n\n  const emptyView = useMemo(() => {\n    if (rows.length === 0) {\n      return (\n        <Typography color=\"textSecondary\">\n          Oops, no results (yet)! Try searching something more specific.{\" \"}\n        </Typography>\n      );\n    }\n  }, [rows.length]);\n\n  return (\n    <div className={classes.tableContainer}>\n      <div className={classes.paginator}>\n        <ButtonGroup variant=\"contained\">\n          <Button\n            disabled={page === 1}\n            onClick={() => {\n              setPage(page - 1);\n            }}\n          >\n            Prev\n          </Button>\n          <Button\n            onClick={() => {\n              setPage(page + 1);\n            }}\n            disabled={data == null || data.length < 10}\n          >\n            Next\n          </Button>\n        </ButtonGroup>\n      </div>\n      {emptyView}\n      <TableContainer>\n        <Table stickyHeader size=\"small\" aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row) => {\n              return (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                  {columns.map((column) => {\n                    const value = row[column.id];\n                    return (\n                      <TableCell key={column.id} align={column.align}>\n                        {column.format && typeof value === \"number\"\n                          ? column.format(value)\n                          : value}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n\nexport default TableData;\n","import React, { useMemo } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nconst useStyles = makeStyles({\n  cardContainer: {\n    paddingLeft: 20,\n    paddingBottom: 20,\n  },\n  submissionButton: {\n    paddingLeft: 20,\n    paddingBottom: 30,\n  },\n});\nfunction Nominations(props) {\n  const { nominationData, setNominationData } = props;\n  const classes = useStyles();\n  const NomCard = ({ Title, Year }) => {\n    return (\n      <div className={classes.cardContainer}>\n        <Card>\n          <CardContent>\n            <Typography color=\"textSecondary\">\n              {Title}, {Year}\n            </Typography>\n          </CardContent>\n          <CardActions>\n            <Button\n              size=\"small\"\n              variant=\"outlined\"\n              color=\"secondary\"\n              onClick={() => {\n                setNominationData(\n                  nominationData.filter(function (nom) {\n                    return nom.Title !== Title;\n                  })\n                );\n              }}\n            >\n              Remove\n            </Button>\n          </CardActions>\n        </Card>\n      </div>\n    );\n  };\n\n  const nomCards = useMemo(() => {\n    return (\n      <div id=\"nominationCards\">\n        {nominationData.map((nom, i) => {\n          return <NomCard Title={nom.Title} Year={nom.Year} />;\n        })}\n      </div>\n    );\n  }, [nominationData]);\n\n  return (\n    <div>\n      <div className={classes.submissionButton}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={nominationData.length < 5}\n          onClick={() => {\n            setNominationData([]);\n            window.alert(\"Thank you for submitting your nominations!\");\n          }}\n        >\n          Submit your 5 nominations!\n        </Button>\n      </div>\n      {nomCards}\n    </div>\n  );\n}\n\nexport default Nominations;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport SearchBar from \"./components/SearchBar.react\";\nimport TableData from \"./components/TableData.react\";\nimport Nominations from \"./components/Nominations.react\";\nimport { Paper, Typography, Link } from \"@material-ui/core\";\n\nfunction App() {\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [nominationData, setNominationData] = useState([]);\n  const searchContent = (\n    <div className=\"Search\">\n      <Typography variant=\"h3\" component=\"h3\">\n        The Shoppies\n      </Typography>\n      <Typography color=\"textSecondary\">Welcome!</Typography>\n      <SearchBar searchInput={searchInput} setSearchInput={setSearchInput} />\n      <Typography color=\"textSecondary\">\n        Created by Allison Chiang:{\" \"}\n        <Link href=\"https://github.com/acchiang\">GitHub</Link> ||{\" \"}\n        <Link href=\"https://linkedin.com/in/allison-chiang\">LinkedIn</Link>\n      </Typography>\n    </div>\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"headerContainer\">\n        <Paper elevation={3} children={searchContent} />\n      </div>\n      <div className=\"bodyContainer\">\n        <div className=\"tableContainer\">\n          <Paper\n            elevation={3}\n            children={\n              <TableData\n                searchInput={searchInput}\n                nominationData={nominationData}\n                setNominationData={setNominationData}\n              />\n            }\n          />\n        </div>\n        <div>\n          <Nominations\n            nominationData={nominationData}\n            setNominationData={setNominationData}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}